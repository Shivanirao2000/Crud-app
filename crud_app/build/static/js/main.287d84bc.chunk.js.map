{"version":3,"sources":["components/Landing.js","components/DetailPage.js","components/EditPost.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Landing","props","state","heading","title","body","posts","componentDidMount","getBlogPost","axios","get","then","response","data","setState","console","log","catch","alert","handleChange","target","name","value","submit","event","preventDefault","payload","url","method","resetUserInputs","fRemove","id","delete","res","fEdit","put","success","datas","this","className","ref","type","placeholder","onChange","onClick","e","Container","Row","md","sm","map","i","Col","key","Card","style","width","Img","variant","src","fluid","Body","Text","_id","href","React","Component","DetailPage","post","match","params","EditPost","Header","data-toggle","data-target","aria-controls","aria-expanded","aria-label","App","Fragment","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"uVA8KeA,G,wDAjKX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAMZC,MAAQ,CACNC,QAAS,uBACTC,MAAO,GACPC,KAAM,GACNC,MAAO,IAXY,EAcrBC,kBAAoB,WAClB,EAAKC,eAfc,EAmBrBA,YAAc,WACZC,IAAMC,IAAI,QACPC,MAAK,SAACC,GACL,IAAMC,EAAOD,EAASC,KACtB,EAAKC,SAAS,CAAER,MAAOO,IACvBE,QAAQC,IAAI,+BAEbC,OAAM,WACLC,MAAM,gCA3BS,EA+BrBC,aAAe,YAAiB,IAAdC,EAAa,EAAbA,OACRC,EAAgBD,EAAhBC,KAAMC,EAAUF,EAAVE,MACd,EAAKR,SAAL,eAAiBO,EAAOC,KAjCL,EAqCrBC,OAAS,SAACC,GACRA,EAAMC,iBAEN,IAAMC,EAAU,CACdtB,MAAO,EAAKF,MAAME,MAClBC,KAAM,EAAKH,MAAMG,MAInBI,IAAM,CACJkB,IAAK,YACLC,OAAQ,OACRf,KAAMa,IAELf,MAAK,WACJI,QAAQC,IAAI,oCACZ,EAAKa,kBACL,EAAKrB,iBAENS,OAAM,WACLF,QAAQC,IAAI,6BAzDG,EAgErBc,QAAU,SAACC,GACTtB,IAAMuB,OAAN,eAAqBD,IAAMpB,MAAK,SAACsB,GAE/B,EAAKzB,kBAnEY,EAuErB0B,MAAQ,SAACH,GAAQ,IAAD,EACU,EAAK7B,MAErBW,EAAO,CACXT,MAJU,EACNA,MAIJC,KALU,EACCA,MAMfI,IAAM0B,IAAN,sBAAyBJ,GAAMlB,GAAMF,MAAK,SAACsB,GACrCA,EAAIpB,KAAKuB,UACXlB,MAAM,uBACN,EAAKV,mBAjFU,EAuFrBqB,gBAAkB,WAChB,EAAKf,SAAS,CACZV,MAAO,GACPC,KAAM,MAxFJ,EAAKH,MAAQ,CACXI,MAAO,IAHM,E,qDA6Gb,IAAD,OACH+B,EAAQC,KAAKpC,MAAMI,MACvB,OAEE,yBAAKiC,UAAU,OAEb,4BAAKD,KAAKpC,MAAMC,SAChB,0BAAMqC,IAAI,SAASD,UAAU,UAC3B,2BAAOE,KAAK,OAAOpB,KAAK,QAAQqB,YAAY,YAAYH,UAAU,YAAYjB,MAAOgB,KAAKpC,MAAME,MAC1FuC,SAAUL,KAAKnB,eACrB,2BAAOsB,KAAK,OAAOpB,KAAK,OAAOqB,YAAY,cAAcH,UAAU,YAAYjB,MAAOgB,KAAKpC,MAAMG,KAC3FsC,SAAUL,KAAKnB,eACrB,4BAAQyB,QAAS,SAACC,GAAD,OAAK,EAAKtB,OAAOsB,IAAIN,UAAU,YAAhD,YAGF,kBAACO,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GACdZ,EAAMa,KAAI,SAACrC,EAAMsC,GAAP,OAGZ,kBAACC,EAAA,EAAD,KACG,wBAAIC,IAAKF,EAAGZ,UAAU,UAGhB,kBAACe,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UACxB,kBAACF,EAAA,EAAKG,IAAN,CAAUC,QAAQ,MAAMC,IAAK9C,EAAKT,MAAOwD,OAAK,IAC7C,kBAACN,EAAA,EAAKO,KAAN,KACC,kBAACP,EAAA,EAAKQ,KAAN,KACCjD,EAAKR,OAGV,4BAAQuC,QAAS,kBAAI,EAAKd,QAAQjB,EAAKkD,MAAMxB,UAAU,gBAAvD,WAEA,uBAAGA,UAAU,kBAAkByB,KAAI,gBAAWnD,EAAKkD,MAC3C,uBAAGxB,UAAU,gBADrB,yB,GA/IU0B,IAAMC,YC6BbC,E,kDArCb,WAAYlE,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXkE,KAAM,IAHS,E,gEAME,IAAD,OACZrC,EAAKO,KAAKrC,MAAMoE,MAAMC,OAAOvC,GACnCtB,IAAMC,IAAN,uBAA0BqB,IAAMpB,MAAK,SAACsB,GAChCA,EAAIpB,KAAKuB,UACX,EAAKtB,SAAS,CACZsD,KAAMnC,EAAIpB,KAAKuD,OAEjBrD,QAAQC,IAAI,SAAU,EAAKd,MAAMkE,Y,+BAI7B,IAAD,EACiB9B,KAAKpC,MAAMkE,KAA3BhE,EADD,EACCA,MAAOC,EADR,EACQA,KACf,OACE,6BACE,4BAAKD,GACL,6BACA,wBAAImC,UAAU,OACZ,wBAAIA,UAAU,YAAd,QACA,wBAAIA,UAAU,aAAalC,S,GA1BZ6D,aCoHVK,E,kDA9GX,WAAYtE,GAAQ,IAAD,8BACf,cAAMA,IAQZC,MAAQ,CACNE,MAAO,GACPC,KAAM,GACNC,MAAO,IAZY,EAerBC,kBAAoB,WAClB,EAAKC,eAhBc,EAmBrBA,YAAc,WACZC,IAAMC,IAAI,QACPC,MAAK,SAACC,GACL,IAAMC,EAAOD,EAASC,KACtB,EAAKC,SAAS,CAAER,MAAOO,IACvBE,QAAQC,IAAI,+BAEbC,OAAM,WACLC,MAAM,gCA3BS,EAiCrBC,aAAe,YAAiB,IAAdC,EAAa,EAAbA,OACRC,EAAgBD,EAAhBC,KAAMC,EAAUF,EAAVE,MACd,EAAKR,SAAL,eAAiBO,EAAOC,KAnCL,EAuCrBY,MAAQ,SAACV,GAGP,IAAMO,EAAK,EAAK9B,MAAMoE,MAAMC,OAAOvC,GAI3BlB,EAAO,CACXT,MAAO,EAAKF,MAAME,MAClBC,KAAM,EAAKH,MAAMG,MAGnBI,IAAM0B,IAAN,sBAAyBJ,GAAMlB,GAAMF,MAAK,SAACsB,GACrCA,EAAIpB,KAAKuB,UACXlB,MAAM,uBACN,EAAKV,mBAtDQ,EA6ErBqB,gBAAkB,WAChB,EAAKf,SAAS,CACZV,MAAO,GACPC,KAAM,MA9EJ,EAAKH,MAAQ,CACXE,MAAO,GACPC,KAAM,GACNC,MAAO,IALM,E,qDAuFb,IAAD,OACKgC,KAAKpC,MAAMI,MACvB,OAGE,yBAAKiC,UAAU,OAEb,yCACA,0BAAMC,IAAI,SAASD,UAAU,UAC3B,2BAAOE,KAAK,OAAOpB,KAAK,QAAQqB,YAAY,YAAYH,UAAU,YAAYjB,MAAOgB,KAAKpC,MAAME,MAC1FuC,SAAUL,KAAKnB,eACrB,2BAAOsB,KAAK,OAAOpB,KAAK,OAAOqB,YAAY,cAAcH,UAAU,YAAYjB,MAAOgB,KAAKpC,MAAMG,KAC3FsC,SAAUL,KAAKnB,eACrB,4BAAQyB,QAAS,SAACC,GAAD,OAAK,EAAKX,MAAMW,IAAIN,UAAU,YAA/C,iB,GArGe0B,IAAMC,WC0BdM,E,uKA9BX,OACE,yBAAKjC,UAAU,+CACb,uBAAGA,UAAU,eAAeyB,KAAK,KAAjC,cAGA,4BACEzB,UAAU,iBACVE,KAAK,SACLgC,cAAY,WACZC,cAAY,aACZC,gBAAc,YACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMtC,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BR,GAAG,aAC3C,wBAAIQ,UAAU,cACZ,wBAAIA,UAAU,mBACZ,uBAAGA,UAAU,WAAWyB,KAAK,KAA7B,aACY,0BAAMzB,UAAU,WAAhB,sB,GAtBL2B,aC0BNY,E,uKAlBX,OACE,kBAAC,IAAMC,SAAP,KACA,kBAAC,IAAD,KACE,yBAAKxC,UAAU,aACf,kBAAC,EAAD,MACE,kBAAC,IAAD,CAAOyC,OAAK,EAACC,KAAK,IAAIC,UAAWlF,IACjC,kBAAC,IAAD,CAAOiF,KAAK,aAAaC,UAAWf,IACpC,kBAAC,IAAD,CAAOc,KAAK,YAAYC,UAAWX,W,GAT3BL,aCIEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjB,MACvB,2DCXNkB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACA,kBAAC,EAAD,QAGFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnF,MAAK,SAAAoF,GACJA,EAAaC,gBAEd/E,OAAM,SAAAgF,GACLlF,QAAQkF,MAAMA,EAAMC,c","file":"static/js/main.287d84bc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from 'axios';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col'\r\n\r\n\r\nimport '../App.css';\r\n\r\nclass Landing extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          posts: [],\r\n        };\r\n      }\r\n\r\n  state = {\r\n    heading: 'Share your memories!',\r\n    title: '',\r\n    body: '',\r\n    posts: []\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    this.getBlogPost();\r\n  };\r\n\r\n\r\n  getBlogPost = () => {\r\n    axios.get('/api')\r\n      .then((response) => {\r\n        const data = response.data;\r\n        this.setState({ posts: data });\r\n        console.log('Data has been received!!');\r\n      })\r\n      .catch(() => {  \r\n        alert('Error retrieving data!!!');\r\n      });\r\n  }\r\n\r\n  handleChange = ({ target }) => {\r\n    const { name, value } = target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n\r\n  submit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const payload = {\r\n      title: this.state.title,\r\n      body: this.state.body\r\n    };\r\n\r\n\r\n    axios({\r\n      url: '/api/save',\r\n      method: 'POST',\r\n      data: payload\r\n    })\r\n      .then(() => {\r\n        console.log('Data has been sent to the server');\r\n        this.resetUserInputs();\r\n        this.getBlogPost();\r\n      })\r\n      .catch(() => {\r\n        console.log('Internal server error');\r\n      });;\r\n      \r\n  };\r\n\r\n\r\n\r\n  fRemove = (id) => {\r\n    axios.delete(`/api/${id}`).then((res) => {\r\n      // alert(\"deleted successfully\");\r\n      this.getBlogPost();\r\n    });\r\n  };\r\n\r\n  fEdit = (id) => {\r\n    const { title, body } = this.state;\r\n    \r\n      const data = {\r\n        title: title,\r\n        body: body\r\n      };\r\n    axios.put(`/api/update/${id}`, data).then((res) => {\r\n      if (res.data.success) {\r\n        alert(\"Edited successfully\");\r\n        this.getBlogPost();\r\n      }\r\n    });\r\n\r\n  };\r\n\r\n  resetUserInputs = () => {\r\n    this.setState({\r\n      title: '',\r\n      body: ''\r\n    });\r\n  };\r\n\r\n \r\n\r\n// fEdit = (i) => {\r\n  // let data = this.state.post[i];\r\n  // this.refs.name.value = data.name;\r\n  // this.refs.address.value = data.address;\r\n\r\n//   this.setState({\r\n//     act: 1,\r\n//     index: i\r\n//   });\r\n\r\n//   this.refs.name.focus();\r\n// }  \r\n\r\nrender() {\r\n  let datas = this.state.posts;\r\n  return (\r\n\r\n    <div className=\"App\">\r\n      \r\n      <h2>{this.state.heading}</h2>\r\n      <form ref=\"myForm\" className=\"myForm\">\r\n        <input type=\"text\" name=\"title\" placeholder=\"image url\" className=\"formField\" value={this.state.title}\r\n              onChange={this.handleChange}/>\r\n        <input type=\"text\" name=\"body\" placeholder=\"description\" className=\"formField\" value={this.state.body}\r\n              onChange={this.handleChange}/>\r\n        <button onClick={(e)=>this.submit(e)} className=\"myButton\">submit </button>\r\n      </form>\r\n      \r\n      <Container>\r\n       <Row md={3} sm={6}>\r\n        {datas.map((data, i) =>\r\n       \r\n       \r\n       <Col>\r\n          <li key={i} className=\"myList\">\r\n            \r\n              \r\n                <Card style={{ width: '18rem' }}>\r\n              <Card.Img variant=\"top\" src={data.title} fluid/> \r\n               <Card.Body>\r\n                <Card.Text>\r\n                {data.body}\r\n                 </Card.Text>\r\n              </Card.Body> \r\n            <button onClick={()=>this.fRemove(data._id)} className=\"myListButton\">remove </button>\r\n            {/* <button onClick={()=>this.fEdit(data._id)} className=\"myListButton\">edit </button> */}\r\n            <a className=\"btn btn-warning\" href={`/edit/${data._id}`}>\r\n                    <i className=\"fas fa-edit\"></i>&nbsp;Edit\r\n                  </a>\r\n            </Card>\r\n            \r\n             \r\n          </li>\r\n          </Col>\r\n          \r\n              \r\n        )}\r\n      </Row>\r\n            </Container>\r\n    </div>\r\n      \r\n  );\r\n}\r\n}\r\n\r\nexport default Landing;\r\n\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nclass DetailPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      post: {},\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    const id = this.props.match.params.id;\r\n    axios.get(`posts/detail/${id}`).then((res) => {\r\n      if (res.data.success) {\r\n        this.setState({\r\n          post: res.data.post,\r\n        });\r\n        console.log(\"post: \", this.state.post);\r\n      }\r\n    });\r\n  }\r\n  render() {\r\n    const { title, body } = this.state.post;\r\n    return (\r\n      <div>\r\n        <h4>{title}</h4>\r\n        <hr />\r\n        <dl className=\"row\">\r\n          <dt className=\"col-sm-2\">Body</dt>\r\n          <dd className=\"col-sm-10\">{body}</dd>\r\n\r\n          {/* <dt className=\"col-sm-2\">Description</dt> */}\r\n          {/* <dd className=\"col-sm-10\">\r\n            <p dangerouslySetInnerHTML={{ __html: description }}></p>\r\n          </dd> */}\r\n        </dl>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DetailPage;","import React, { Component } from \"react\";\r\nimport axios from 'axios';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\n\r\nimport '../App.css';\r\n\r\nclass EditPost extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          title: '',\r\n          body: '',\r\n          posts: []\r\n        };\r\n      }\r\n\r\n  state = {\r\n    title: '',\r\n    body: '',\r\n    posts: []\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    this.getBlogPost();\r\n  };\r\n\r\n  getBlogPost = () => {\r\n    axios.get('/api')\r\n      .then((response) => {\r\n        const data = response.data;\r\n        this.setState({ posts: data });\r\n        console.log('Data has been received!!');\r\n      })\r\n      .catch(() => {  \r\n        alert('Error retrieving data!!!');\r\n      });\r\n  }\r\n\r\n  \r\n\r\n  handleChange = ({ target }) => {\r\n    const { name, value } = target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n\r\n  fEdit = (event) => {\r\n    // event.preventDefault();\r\n    \r\n    const id = this.props.match.params.id;\r\n    // alert(id);\r\n    // const { title, body } = this.state;\r\n    \r\n      const data = {\r\n        title: this.state.title,\r\n        body: this.state.body\r\n      };\r\n      // alert(data);\r\n      axios.put(`/api/update/${id}`, data).then((res) => {\r\n        if (res.data.success) {\r\n          alert(\"Edited successfully\");\r\n          this.getBlogPost();\r\n        }\r\n      });\r\n    \r\n  };\r\n\r\n\r\n\r\n  // fEdit = (id) => {\r\n  //   const { title, body } = this.state;\r\n    \r\n  //     const data = {\r\n  //       title: title,\r\n  //       body: body\r\n  //     };\r\n  //   axios.put(`/api/update/${id}`, data).then((res) => {\r\n  //     if (res.data.success) {\r\n  //       alert(\"Edited successfully\");\r\n  //     }\r\n  //   });\r\n\r\n  // };\r\n\r\n  resetUserInputs = () => {\r\n    this.setState({\r\n      title: '',\r\n      body: ''\r\n    });\r\n  };\r\n\r\n \r\n\r\n\r\nrender() {\r\n  let datas = this.state.posts;\r\n  return (\r\n    \r\n    \r\n    <div className=\"App\">\r\n      \r\n      <h2>Edit post</h2>\r\n      <form ref=\"myForm\" className=\"myForm\">\r\n        <input type=\"text\" name=\"title\" placeholder=\"image url\" className=\"formField\" value={this.state.title}\r\n              onChange={this.handleChange}/>\r\n        <input type=\"text\" name=\"body\" placeholder=\"description\" className=\"formField\" value={this.state.body}\r\n              onChange={this.handleChange}/>\r\n        <button onClick={(e)=>this.fEdit(e)} className=\"myButton\">submit </button>\r\n      </form>\r\n      \r\n     \r\n    </div>\r\n     \r\n  );\r\n}\r\n}\r\n\r\nexport default EditPost;\r\n\r\n","import React, { Component } from \"react\";\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          Mern stack\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#navbarNav\"\r\n          aria-controls=\"navbarNav\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n          <ul className=\"navbar-nav\">\r\n            <li className=\"nav-item active\">\r\n              <a className=\"nav-link\" href=\"/\">\r\n                All Posts <span className=\"sr-only\">(current)</span>\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Landing from \"./components/Landing.js\";\nimport DetailPage from \"./components/DetailPage.js\";\n// import CreatePost from \"./components/CreatePost\";\nimport EditPost from \"./components/EditPost.js\";\nimport Header from \"./components/Header.js\";\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n      <Switch>\n        <div className=\"container\">\n        <Header />\n          <Route exact path=\"/\" component={Landing} />\n          <Route path=\"/posts/:id\" component={DetailPage} />\n          <Route path=\"/edit/:id\" component={EditPost} />\n          \n        </div>\n      </Switch>\n      </React.Fragment>\n    );\n  }\n}\n\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n    <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}